(ns monkey-lang.eval-test 
  (:require [clojure.test :refer [deftest is testing]]
            [monkey-lang.eval :as eval]
            [monkey-lang.parser :as parser]
            [monkey-lang.object :as object]))

(def evaluate (comp object/value eval/run parser/run))

(deftest name-test
  (testing "Integar Literals"
    (is (= (evaluate "5;") 5)))
  (testing "Boolean Literals"
    (is (= (evaluate "true;") true))
    (is (= (evaluate "false;") false)))
  (testing "Prefix Bang Operator"
    (is (= (evaluate "!true") false))
    (is (= (evaluate "!false") true))
    (is (= (evaluate "!5") false))
    (is (= (evaluate "!!true") true))
    (is (= (evaluate "!!false") false))
    (is (= (evaluate "!!5") true)))
  (testing "Interger Expressions"
    (is (= (evaluate "5") 5))
    (is (= (evaluate "10") 10))
    (is (= (evaluate "-5") -5))
    (is (= (evaluate "-10") -10))
    (is (= (evaluate "5 + 5 + 5 + 5 - 10") 10))
    (is (= (evaluate "2 * 2 * 2 * 2 * 2") 32))
    (is (= (evaluate "-50 + 100 + -50") 0))
    (is (= (evaluate "5 * 2 + 10") 20))
    (is (= (evaluate "5 + 2 * 10") 25))
    (is (= (evaluate "20 + 2 * -10") 0))
    (is (= (evaluate "50 / 2 * 2 + 10") 60))
    (is (= (evaluate "2 * (5 + 10)") 30))
    (is (= (evaluate "3 * 3 * 3 + 10") 37))
    (is (= (evaluate "3 * (3 * 3) + 10") 37))
    (is (= (evaluate "(5 + 10 * 2 + 15 / 3) * 2 + -10") 50)))
  (testing "Infix Boolean Expressions"
    (is (= (evaluate "true") true))
    (is (= (evaluate "false") false))
    (is (= (evaluate "1 < 2") true))
    (is (= (evaluate "1 > 2") false))
    (is (= (evaluate "1 < 1") false))
    (is (= (evaluate "1 > 1") false))
    (is (= (evaluate "1 == 1") true))
    (is (= (evaluate "1 != 1") false))
    (is (= (evaluate "1 == 2") false))
    (is (= (evaluate "1 != 2") true))
    (is (= (evaluate "true == true") true))
    (is (= (evaluate "false == false") true))
    (is (= (evaluate "true == false") false))
    (is (= (evaluate "true != false") true))
    (is (= (evaluate "false != true") true))
    (is (= (evaluate "(1 < 2) == true") true))
    (is (= (evaluate "(1 < 2) == false") false))
    (is (= (evaluate "(1 > 2) == true") false))
    (is (= (evaluate "(1 > 2) == false") true)))
  (testing "If Else Expressions"
    (is (= (evaluate "if (true) { 10 }") 10))
    (is (= (evaluate "if (false) { 10 }") nil))
    (is (= (evaluate "if (1) { 10 }") 10))
    (is (= (evaluate "if (1 < 2) { 10 }") 10))
    (is (= (evaluate "if (1 > 2) { 10 }") nil))
    (is (= (evaluate "if (1 > 2) { 10 } else { 20 }") 20))
    (is (= (evaluate "if (1 < 2) { 10 } else { 20 }") 10)))
  (testing "Return Statements"
    (is (= (evaluate "return 10;") 10))
    (is (= (evaluate "return 10; 9;") 10))
    (is (= (evaluate "return 2 * 5; 9;") 10))
    (is (= (evaluate "9; return 2 * 5; 9;") 10))
    (is (= (evaluate "if (10 > 1) { if (10 > 1) {return 10;} return 1;}") 10)))
  (testing "Error Handling"
    (is (= (evaluate "5 + true;") "Type Mismatch: integer + boolean"))
    (is (= (evaluate "5 + true; 5;") "Type Mismatch: integer + boolean"))
    (is (= (evaluate "-true") "Unknown Operator: -boolean"))
    (is (= (evaluate "true + false;") "Unknown Operator: boolean + boolean"))
    (is (= (evaluate "5; true + false; 5") "Unknown Operator: boolean + boolean"))
    (is (= (evaluate "if (10 > 1) { true + false; }") "Unknown Operator: boolean + boolean"))
    (is (= (evaluate "if (10 > 1) { if (10 > 1) { return true + false; } return 1; }") "Unknown Operator: boolean + boolean"))
    (is (= (evaluate "foobar") "Identifier not found: foobar")))
  (testing "Let Statements"
    (is (= (evaluate "let a = 5; a;") 5))
    (is (= (evaluate "let a = 5 * 5; a;") 25))
    (is (= (evaluate "let a = 5; let b = a; b;") 5))
    (is (= (evaluate "let a = 5; let b = a; b;") 5))
    (is (= (evaluate "let a = 5; let b = a; b;") 5))
    (is (= (evaluate "let a = 5; let b = a; let c = a + b + 5; c;") 15)))
  (testing "Function Application"
    (is (= (evaluate "let identity = fn(x) { x; }; identity(5);") 5))
    (is (= (evaluate "let identity = fn(x) { return x; }; identity(5);") 5))
    (is (= (evaluate "let double = fn(x) { x * 2; }; double(5);") 10))
    (is (= (evaluate "let add = fn(x, y) { x + y; }; add(5, 5);") 10))
    (is (= (evaluate "let add = fn(x, y) { x + y; }; add(5 + 5, add(5, 5));") 20))
    (is (= (evaluate "fn(x) { x; }(5)") 5))
    (is (= (evaluate "let add = fn(a, b) { a + b }; let sub = fn(a, b) { a - b }; let applyFunc = fn(a, b, func) { func(a, b) }; applyFunc(2, 2, add);"), 4))
    (is (= (evaluate "let newAdder = fn(x) { fn(y) { x + y } }; let addTwo = newAdder(2); addTwo(3);"), 5))
    (is (= (evaluate "let makeGreeter = fn(greeting) { fn(name) { greeting + \" \" + name + \"!\" } }; let hello = makeGreeter(\"Hello\"); hello(\"Thorsten\");"), "Hello Thorsten!"))))
