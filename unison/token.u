
structural type Token = Illegal Text | Ident Text | Int Text 
    | Error Text Token | ErrorExp Text [Token] | Eof
    | Assign | Plus | Comma 
    | Semicolon | Lparen | Rparen 
    | Lbrace |  Rbrace | Minus 
    | Bang | Asterisk| Slash 
    | Fn | Let | Gt| Lt 
    | True | False | If | Else
    | Return | Eq | NotEq
    | I64 Int | InfixExp Token Token Token
    | PrefixExp Token Token | Check [Token]
    | FunCall Token [Token] | Closure [Token] [Token]

Token.keyWords : Text -> Token
Token.keyWords word = 
    match word with
    "fn" -> Fn
    "let" -> Let
    "true" -> True
    "false" -> False
    "if" -> If
    "else" -> Else
    "return" -> Return
    _ -> Ident word

Token.isIdent : Token -> Boolean
Token.isIdent = cases
    Ident _ -> true
    _ -> false

Token.isInt : Token -> Boolean 
Token.isInt = cases
    Int _ -> true
    _ -> false

Token.isIntOrIdent : Token -> Boolean
Token.isIntOrIdent = cases
    Ident _ -> true
    Int _ -> true
    I64 _ -> true
    _ -> false

Token.isExp : Token -> Boolean
Token.isExp = cases
    InfixExp _ _ _ -> true
    PrefixExp _ _ -> true
    Int _ -> true
    Ident _ -> true
    I64 _ -> true
    _ -> false

Token.isPrefix : Token -> Boolean
Token.isPrefix = cases
    Bang -> true
    Minus -> true
    _ -> false

Token.isInfix : Token -> Boolean
Token.isInfix = cases
    Plus -> true
    Minus -> true
    Asterisk -> true
    Slash -> true
    Gt -> true
    Lt -> true
    NotEq -> true
    Eq -> true
    _ -> false